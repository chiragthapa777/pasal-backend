// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
  VENDOR_ADMIN
}
enum OrderStatusEnum {
  PLACED
  PROCESSING
  WAREHOUSED
  DELIVERING
  COMPLETED
}
enum OrderItemStatusEnum {
  PLACED
  PROCESSING
  WAREHOUSED
  DELIVERING
  COMPLETED
}
enum PaymentMode{
  CASH
  ESEWA
  KHALTI
  FONEPAY
  CHEQUE
  CARD
}


model User {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique
  password    String      
  name        String?
  role        Role         @default(USER)
  number      String?
  vendorId    Int?
  vendorAdmin Boolean     @default(false)
  cart        Cart?
  cartDetails CartDetails[]
  order       Order[]
  orderItems  OrderItems[]
  payments    Payment[]

  //relation
  shipping      Shipping?
  vendor        Vendor?        @relation(fields: [vendorId], references: [id])
  notifications Notification[]
  history       History[]
  products      Product[]
  wishlists     WishList[]
  reviews       Review[]
  questions     Question[]
  answers       Answer[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  price     Float
  desc      String?
  groupId   Int?
  active    Boolean  @default(true)
  quantity  Int
  vendorId  Int
  userId    Int
  unit      String  @default("piece")

  //relation
  vendor       Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productGroup ProductGroup? @relation(fields: [groupId], references: [id])
  wishlists    WishList[]
  productTags  Product_Tag[]
  questions    Question[]
  reviews      Review[]
  cartDetails  CartDetails[]
  images ProductImage[]
  orderItems OrderItems[]
  discounts Discount[]
}

model ProductImage{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url String
  public_url String
  productId Int
  desc String?
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Shipping {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   String
  province  String
  district  String
  ward      String
  street    String
  phone     String
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vendor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String  @unique
  name      String
  pan       String? @unique
  desc      String?
  active    Boolean  @default(true)
  requestAccepted    Boolean  @default(false)

  //relation
  users         User[]
  products      Product[]
  productGroups ProductGroup[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  message   String
  productId Int?
  orderId   Int?

  //relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  urls      String
  userId    Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int

  //relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  name      String
  vendorId  Int

  //relation
  products Product[]
  vendor   Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  desc String?
  productTags Product_Tag[]
}

model Product_Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tagId     Int
  productId Int

  //relations
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  pr0duct Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  feedback  String
  userId    Int
  productId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  product Product @relation(fields: [productId], references: [id])
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question  String
  answered  Boolean  @default(false)
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  product Product  @relation(fields: [productId], references: [id])
  answers Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answers    String
  userId     Int
  questionId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Cart {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartDetails CartDetails[]
}

model CartDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      
  cartId    Int
  productId Int
  quantity  Int
  active    Boolean @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}



model OtherCharge {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @unique
  desc String?
  price Float
  orderItems OrderItems[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status OrderStatusEnum @default(PLACED)
  isBillPrinted Boolean @default(false)
  isPaid Boolean @default(false)
  userId Int
  total Float
  discount Float
  totalAfterDiscount Float
  vat Float
  totalWithVat Float
  otherCharge Float
  grandTotal Float
  orderItems OrderItems[]
  payments Payment[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status OrderItemStatusEnum @default(PLACED)
  quantity Int
  rate Float
  orderId Int
  productId Int? 
  otherChargeId Int?
  discountPercent Int?
  vatPercent Int?
  userId Int
  total Float
  discount Float
  totalAfterDiscount Float
  vat Float
  totalWithVat Float
  grandTotal Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  othercharges OtherCharge?  @relation(fields: [otherChargeId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount Float
  remark String?
  mode PaymentMode
  addedBy Int
  orderId Int
  user      User     @relation(fields: [addedBy], references: [id], onDelete: Cascade)
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Discount{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  percent Int
  isValid Boolean @default(true)
  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// discount code

// order items

// invoice invoice details
